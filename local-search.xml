<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【SSM】Spring框架-Spring配置数据源</title>
    <link href="/2023/09/26/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2023/09/26/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-配置数据源-DataSource"><a href="#spring-配置数据源-DataSource" class="headerlink" title="spring 配置数据源 DataSource"></a><strong>spring 配置数据源 DataSource</strong></h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps163.jpg" alt="img"> </p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a><strong>开发步骤</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps164.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps165.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps166.jpg" alt="img"> </p><p><strong>抽取 jdbc.properti 文件( 第二个框框中 getBundle 中的名字  是在 resources 目录下找( 不写 resources ) 文件  同时不写后缀名 )</strong></p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps167.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps168.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps169.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps170.jpg" alt="img"> </p><h2 id="抽取-jdbc-配置文件"><a href="#抽取-jdbc-配置文件" class="headerlink" title="抽取 jdbc 配置文件"></a><strong>抽取 jdbc 配置文件</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps171.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps172.jpg" alt="img"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps173.jpg" alt="img"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【SSM】Spring框架-基础知识详解</title>
    <link href="/2023/09/25/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/09/25/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-入门"><a href="#spring-入门" class="headerlink" title="spring 入门"></a><strong>spring 入门</strong></h1><h2 id="spring-简介"><a href="#spring-简介" class="headerlink" title="spring 简介"></a><strong>spring 简介</strong></h2><p>Spring是分层的 Java SE&#x2F;EE应用 full-stack 轻量级开源框架，以 <strong>IoC</strong>（Inverse Of Control：反转控制）和<strong>AOP</strong>（Aspect Oriented Programming：面向切面编程）为内核。</p><p>提供了<strong>展现层 SpringMVC</strong> 和<strong>持久层 Spring JDBCTemplate</strong> 以及<strong>业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p><h2 id="Spring发展历程"><a href="#Spring发展历程" class="headerlink" title="Spring发展历程"></a><strong>Spring发展历程</strong></h2><p>1997 年， IBM提出了EJB 的思想</p><p>1998 年，SUN制定开发标准规范 EJB1.0</p><p>1999 年，EJB1.1 发布</p><p>2001 年，EJB2.0 发布</p><p>2003 年，EJB2.1 发布</p><p>2006 年，EJB3.0 发布</p><p><strong>Rod Johnson （ Spring 之父）</strong></p><p>Expert One-to-One J2EE Design and Development(2002)阐述了 J2EE 使用EJB 开发设计的优点及解决方案</p><p>Expert One-to-One J2EE Development without EJB(2004)阐述了 J2EE 开发不使用 EJB的解决方式（Spring 雏形）</p><p><strong>2017 年 9 月份发布了 Spring 的最新版本 Spring5.0 通用版（GA）</strong></p><h2 id="spring-优势"><a href="#spring-优势" class="headerlink" title="spring 优势"></a><strong>spring 优势</strong></h2><p><strong>1）方便解耦，简化开发</strong></p><p>通过 Spring 提供的 IoC容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度耦合。</p><p>用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><p><strong>2）AOP 编程的支持</strong></p><p>通过 Spring的 AOP 功能，方便进行面向切面编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松实现。</p><p><strong>3）声明式事务的支持</strong></p><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p><p><strong>4）方便程序的测试</strong></p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情</p><p><strong>5）方便集成各种优秀框架</strong></p><p>Spring对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的支持。</p><p><strong>6）降低 JavaEE API 的使用难度</strong></p><p>Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</p><p><strong>7）Java 源码是经典学习范例</strong></p><p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深</p><p>造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p><h2 id="spring-体系结构"><a href="#spring-体系结构" class="headerlink" title="spring 体系结构"></a><strong>spring 体系结构</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps4.jpg" alt="img"> </p><h2 id="spring-快速入门"><a href="#spring-快速入门" class="headerlink" title="spring 快速入门"></a><strong>spring 快速入门</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps5.jpg" alt="img"> </p><h2 id="spring-开发步骤"><a href="#spring-开发步骤" class="headerlink" title="spring 开发步骤"></a><strong>spring 开发步骤</strong></h2><p>① 导入 Spring 开发的基本包坐标</p><p>② 编写 Dao 接口和实现类</p><p>③ 创建 Spring 核心配置文件</p><p>④ 在 Spring 配置文件中配置 UserDaoImpl</p><p>⑤ 使用 Spring 的 API 获得 Bean 实例 </p><h1 id="bean-标签"><a href="#bean-标签" class="headerlink" title="bean 标签"></a><strong>bean 标签</strong></h1><h2 id="bean-基本配置"><a href="#bean-基本配置" class="headerlink" title="bean 基本配置"></a><strong>bean 基本配置</strong></h2><h3 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a><strong>Bean标签基本配置</strong></h3><p>用于配置对象交由<strong>Spring</strong> 来创建。</p><p>默认情况下它调用的是类中的<strong>无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p><p>基本属性：</p><p> <strong>id</strong>：Bean实例在Spring容器中的唯一标识</p><p> <strong>class</strong>：Bean的全限定名称 </p><h3 id="scope-作用范围"><a href="#scope-作用范围" class="headerlink" title="scope 作用范围"></a><strong>scope 作用范围</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps9.jpg" alt="img"> </p><h3 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a><strong>Bean标签范围配置</strong></h3><p><strong>1）当scope的取值为<strong><strong>singleton</strong></strong>时</strong></p><p>Bean的实例化个数：1个</p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>Bean的生命周期：</p><p> 对象创建：当应用加载，创建容器时，对象就被创建了</p><p> 对象运行：只要容器在，对象一直活着</p><p> 对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><p><strong>2）当scope的取值为<strong><strong>prototype</strong></strong>时</strong></p><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p> 对象创建：当使用对象时，创建新的对象实例</p><p> 对象运行：只要对象在使用中，就一直活着</p><p> 对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了 </p><h2 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a><strong>bean 生命周期</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps11.jpg" alt="img"> </p><h2 id="bean-实例化"><a href="#bean-实例化" class="headerlink" title="bean 实例化"></a><strong>bean 实例化</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps12.jpg" alt="img"> </p><h2 id="bean-依赖注入-DI"><a href="#bean-依赖注入-DI" class="headerlink" title="bean 依赖注入 DI"></a><strong>bean 依赖注入 DI</strong></h2><h3 id="依赖注入分析"><a href="#依赖注入分析" class="headerlink" title="依赖注入分析"></a><strong>依赖注入分析</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps13.jpg" alt="img"> </p><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps14.jpg" alt="img"> </p><h3 id="依赖注入概念"><a href="#依赖注入概念" class="headerlink" title="依赖注入概念"></a><strong>依赖注入概念</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps15.jpg" alt="img"> </p><p>在配置文件 applicationContext.xml 中注入 propert 标签</p><h3 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a><strong>注入方式</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps16.jpg" alt="img"> </p><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps17.jpg" alt="img"> </p><h3 id="注入的数据类型"><a href="#注入的数据类型" class="headerlink" title="注入的数据类型"></a><strong>注入的数据类型</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps18.jpg" alt="img"> </p><p>如果是 private List&lt;&gt; 则用 property 里的 list 标签……</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;**bean** **id****=<span class="hljs-string">&quot;userDao&quot;</span>** **class****=<span class="hljs-string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>**&gt;<br><br>&lt;**property** **name****=<span class="hljs-string">&quot;strList&quot;</span>**&gt;<br><br>&lt;**list**&gt;<br><br>            &lt;**value**&gt;aaa&lt;/**value**&gt;<br><br>            &lt;**value**&gt;bbb&lt;/**value**&gt;<br><br>            &lt;**value**&gt;ccc&lt;/**value**&gt;<br><br>        &lt;/**list**&gt;<br><br>&lt;/**property**&gt;<br><br>&lt;/**bean**&gt;<br></code></pre></td></tr></table></figure><h2 id="分模块-引其他配置文件"><a href="#分模块-引其他配置文件" class="headerlink" title="分模块  引其他配置文件"></a><strong>分模块  引其他配置文件</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps20.jpg" alt="img"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><strong>知识要点</strong></p><p><strong>Spring的重点配置</strong></p><p><bean>标签</p><p>​id属性:在容器中Bean实例的唯一标识，不允许重复</p><p>​class属性:要实例化的Bean的全限定名</p><p>​scope属性:Bean的作用范围，常用是Singleton(默认)和prototype</p><p>​<property>标签：属性注入</p><p>​name属性：属性名称</p><p>​value属性：注入的普通属性值</p><p>​ref属性：注入的对象引用值</p><p>​<list>标签</p><p>​<map>标签</p><p>​<properties>标签</p><p>​<constructor-arg>标签</p><p><import>标签:导入其他的Spring的分文件 </p><h1 id="ApplicationContext-应用上下文"><a href="#ApplicationContext-应用上下文" class="headerlink" title="ApplicationContext 应用上下文"></a><strong>ApplicationContext 应用上下文</strong></h1><h2 id="ApplicationContext-相关介绍"><a href="#ApplicationContext-相关介绍" class="headerlink" title="ApplicationContext 相关介绍"></a><strong>ApplicationContext 相关介绍</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps22.jpg" alt="img"> </p><p><strong>ApplicationContext的实现类</strong></p><p><strong>1）ClassPathXmlApplicationContext</strong></p><p>它是从类的根路径下加载配置文件 推荐使用这种</p><p><strong>2）FileSystemXmlApplicationContext</strong></p><p>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p><p><strong>3）AnnotationConfigApplicationContext</strong></p><p>当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>assertBeanFactoryActive();<br><span class="hljs-keyword">return</span> getBeanFactory().getBean(name);<br>&#125;<br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>assertBeanFactoryActive();<br><span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType);<br>&#125;<br></code></pre></td></tr></table></figure><p> 其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p><p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，</p><p>则此方法会报错。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps25.jpg" alt="img"> </p><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a><strong>注解开发</strong></h1><h2 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a><strong>原始注解</strong></h2><p><strong>Spring原始注解</strong></p><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置</p><p>文件可以简化配置，提高开发效率。 </p><p> <strong>Spring原始注解</strong></p><p>Spring原始注解主要是替代<Bean>的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><p><strong>Spring原始注解</strong></p><p><strong>注意：</strong></p><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean</p><p>需要进行扫描以便识别使用注解配置的类、字段和方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--注解的组件扫描--&gt;<br>&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.itheima&quot;</span>&gt;<br>&lt;/context:componentscan&gt;<br></code></pre></td></tr></table></figure><p><strong>使用测试 前 7 个注解</strong></p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps155.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps156.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps157.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps158.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps159.jpg" alt="img"> </p><p><strong>使用测试  后几个</strong></p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps160.jpg" alt="img"> </p><h2 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a><strong>新注解</strong></h2><p><strong>Spring新注解</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring 在初始化容器时要扫描的包。作用和在 Spring 的 xml 配置文件中的，&lt;context:component-scan base-package&#x3D;”com.itheima”&#x2F;&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到 Spring 容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties 文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps162.jpg" alt="img"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>my-first-blog</title>
    <link href="/2023/09/23/my-first-blog/"/>
    <url>/2023/09/23/my-first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="标题：我的程序员之路开启——搭建个人博客的第一篇"><a href="#标题：我的程序员之路开启——搭建个人博客的第一篇" class="headerlink" title="标题：我的程序员之路开启——搭建个人博客的第一篇"></a>标题：我的程序员之路开启——搭建个人博客的第一篇</h1><p>大家好！我是q12we，一名在校大学生。今天，我很高兴向大家分享我的个人博客创建的经历和我对于未来的期望。</p><p>曾经，我一直是一个默默无闻的大学生，积累了一些编程经验，但并没有向外界展示。直到最近，我意识到建立一个个人博客的重要性。通过博客，我可以与更多的人交流、分享我的技术心得、记录学习过程，并且与其他程序员建立联系。</p><p>搭建个人博客是一个很有趣的过程。下面，我将分享我的第一篇博客的内容和我在搭建博客过程中遇到的一些挑战。</p><h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><p>我的博客将主要关注以下几个方面：</p><ol><li><p>编程教程和技术分享：我会定期发布有关编程的教程文章，分享我在学习、开发和解决问题过程中的经验和技巧。</p></li><li><p>技术实践：我会分享一些我个人参与的项目、实践和应用，包括前端开发、后端开发等各个方面。</p></li><li><p>解决问题的方法：我将记录一些常见的编程问题和解决方案，帮助其他程序员更快地解决类似的问题。</p></li><li><p>技术趋势和研究：我会关注最新的技术趋势和前沿的研究，分享我的观点和想法。</p><span id="more"></span></li></ol><h2 id="搭建个人博客的挑战"><a href="#搭建个人博客的挑战" class="headerlink" title="搭建个人博客的挑战"></a>搭建个人博客的挑战</h2><p>在搭建个人博客的过程中，我遇到了一些挑战，但也学到了很多知识和技巧。</p><ol><li><p>选择合适的博客平台：我经过一番研究选择了一个适合我的博客平台，并按照教程进行安装和配置。</p></li><li><p>设计和布局：我花了不少时间对博客进行设计和布局，以使其看起来简洁、美观且易于阅读。</p></li><li><p>内容创作：编写第一篇博客是一个新的挑战，我学会了如何用简洁明了的语言表达自己的想法，提供有用的信息给读者。</p></li><li><p>推广和互动：博客不仅仅是写作，还需要积极推广，与读者进行互动，接受反馈，并不断改进和提升。</p></li></ol><h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><p>对于未来，我充满了期待。通过个人博客，我希望能够：</p><ol><li><p>不断学习和进步：通过分享和交流，我相信自己的编程能力会不断提高，学会更多新的知识和技能。</p></li><li><p>建立个人品牌：通过博客，我希望能够建立起自己的个人品牌，让更多人认识和信任我的技术能力。</p></li><li><p>与他人建立联系：我期待能够与更多的程序员、技术爱好者和行业专家建立联系，进行技术交流和合作。</p></li><li><p>提供帮助和价值：我希望能够通过博客为他人提供帮助、分享有价值的内容，为编程社区做出贡献。</p></li></ol><p>在未来的旅程中，我会保持积极的态度和持续的学习精神，分享更多</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/23/hello-world/"/>
    <url>/2023/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
