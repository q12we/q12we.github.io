<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【SSM】SpringMVC框架-基础知识详解</title>
    <link href="/2023/10/05/%E3%80%90SSM%E3%80%91SpringMVC%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/10/05/%E3%80%90SSM%E3%80%91SpringMVC%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a><strong>SpringMVC概述</strong></h2><p><strong>SpringMVC</strong> 是一种基于 Java 的实现 <strong>MVC 设计模型</strong>的请求驱动类型的轻量级 <strong>Web 框架</strong>，属于</p><p><strong>SpringFrameWork</strong> 的后续产品，已经融合在 Spring Web Flow 中。</p><p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优</p><p>秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时</p><p>它还支持 <strong>RESTful</strong> 编程风格的请求。</p><h2 id="SpringMVC快速入门步骤"><a href="#SpringMVC快速入门步骤" class="headerlink" title="SpringMVC快速入门步骤"></a><strong>SpringMVC快速入门步骤</strong></h2><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p><p>开发步骤：</p><p>① 导入SpringMVC相关坐标</p><p>② 配置SpringMVC核心控制器DispathcerServlet</p><p>③ 创建Controller类和视图页面</p><p>④ 使用注解配置Controller类中业务方法的映射地址</p><p>⑤ 配置SpringMVC核心文件 spring-mvc.xml</p><p>⑥ 客户端发起请求测试</p><h2 id="SpringMVC入门详细步骤"><a href="#SpringMVC入门详细步骤" class="headerlink" title="SpringMVC入门详细步骤"></a>SpringMVC入门详细步骤</h2><p>① 导入Spring、SpringMVC、Servlet和Jsp的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--SpringMVC坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Servlet坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Jsp坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 在web.xml配置SpringMVC的核心控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>③ 创建Controller和业务方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">QuickController</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">quickMethod</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;quickMethod running.....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③ 创建视图页面index.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello SpringMVC!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>④ 配置注解</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/quick&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String quickMethod()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;quickMethod running.....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>⑤ 创建spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.itheima&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>⑥ 访问测试地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/itheima_springmvc1/</span>quick<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【SSM】Spring框架-Spring集成web环境</title>
    <link href="/2023/10/05/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/10/05/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h1><h2 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a><strong>ApplicationContext应用上下文获取方式</strong></h2><p>应用上下文对象是通过<strong>new ClasspathXmlApplicationContext(spring配置文件)</strong> 方式获取的，但是每次从</p><p>容器中获得Bean时都要编写<strong>new ClasspathXmlApplicationContext(spring配置文件)</strong> ，这样的弊端是配置</p><p>文件加载多次，应用上下文对象创建多次。</p><p>在Web项目中，可以使用<strong>ServletContextListener</strong>监听Web应用的启动，我们可以在Web应用启动时，就加</p><p>载Spring的配置文件，创建应用上下文对象<strong>ApplicationContext</strong>，在将其存储到最大的域<strong>servletContext</strong>域</p><p>中，这样就可以在任意位置从域中获得应用上下文<strong>ApplicationContext</strong>对象了。</p><h2 id="Spring提供获取应用上下文的工具"><a href="#Spring提供获取应用上下文的工具" class="headerlink" title="Spring提供获取应用上下文的工具"></a><strong>Spring提供获取应用上下文的工具</strong></h2><p>上面的分析不用手动实现，Spring提供了一个监听器<strong>ContextLoaderListener</strong>就是对上述功能的封装，该监</p><p>听器内部加载Spring配置文件，创建应用上下文对象，并存储到<strong>ServletContext</strong>域中，提供了一个客户端工</p><p>具<strong>WebApplicationContextUtils</strong>供使用者获得应用上下文对象。</p><p>所以我们需要做的只有两件事：</p><p>① 在<strong>web.xml</strong>中配置<strong>ContextLoaderListener</strong>监听器（导入spring-web坐标）</p><p>② 使用<strong>WebApplicationContextUtils</strong>获得应用上下文对象<strong>ApplicationContext</strong></p><h2 id="Spring集成web环境步骤"><a href="#Spring集成web环境步骤" class="headerlink" title="Spring集成web环境步骤"></a>Spring集成web环境步骤</h2><h3 id="导入Spring集成web的坐标"><a href="#导入Spring集成web的坐标" class="headerlink" title="导入Spring集成web的坐标"></a><strong>导入Spring集成web的坐标</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置ContextLoaderListener监听器"><a href="#配置ContextLoaderListener监听器" class="headerlink" title="配置ContextLoaderListener监听器"></a><strong>配置ContextLoaderListener监听器</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--全局参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-comment">&lt;!--Spring的监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>        org.springframework.web.context.ContextLoaderListener<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通过工具获得应用上下文对象"><a href="#通过工具获得应用上下文对象" class="headerlink" title="通过工具获得应用上下文对象"></a><strong>通过工具获得应用上下文对象</strong></h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ApplicationContext applicationContext <span class="hljs-operator">=</span> <br>WebApplicationContextUtils.getWebApplicationContext(servletContext)<span class="hljs-comment">;</span><br>Object obj <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;id&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【SSM】Spring框架-Spring集成Junit</title>
    <link href="/2023/10/05/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%9B%86%E6%88%90Junit/"/>
    <url>/2023/10/05/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%9B%86%E6%88%90Junit/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring集成Junit"><a href="#Spring集成Junit" class="headerlink" title="Spring集成Junit"></a>Spring集成Junit</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="原始Junit测试Spring的问题"><a href="#原始Junit测试Spring的问题" class="headerlink" title="原始Junit测试Spring的问题"></a><strong>原始Junit测试Spring的问题</strong></h3><p>在测试类中，每个测试方法都有以下两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br><span class="hljs-type">IAccountService</span> <span class="hljs-variable">as</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;accountService&quot;</span>,IAccountService.class);<br></code></pre></td></tr></table></figure><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。</p><h3 id="上述问题解决思路"><a href="#上述问题解决思路" class="headerlink" title="上述问题解决思路"></a><strong>上述问题解决思路</strong></h3><p>• 让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</p><p>• 将需要进行测试Bean直接在测试类中进行注入</p><h3 id="Spring集成Junit步骤"><a href="#Spring集成Junit步骤" class="headerlink" title="Spring集成Junit步骤"></a><strong>Spring集成Junit步骤</strong></h3><p>① 导入spring集成Junit的坐标</p><p>② 使用@Runwith注解替换原来的运行期</p><p>③ 使用@ContextConfiguration指定配置文件或配置类</p><p>④ 使用@Autowired注入需要测试的对象</p><p>⑤ 创建测试方法进行测试</p><h3 id="Spring集成Junit代码实现"><a href="#Spring集成Junit代码实现" class="headerlink" title="Spring集成Junit代码实现"></a><strong>Spring集成Junit代码实现</strong></h3><p>① 导入spring集成Junit的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 使用@Runwith注解替换原来的运行期</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@RunWith</span>(<span class="hljs-title class_">SpringJUnit4ClassRunner</span>.<span class="hljs-keyword">class</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringJunitTest</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>③ 使用@ContextConfiguration指定配置文件或配置类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringJUnit4ClassRunner.class)<br><span class="hljs-comment">//加载spring核心配置文件</span><br><span class="hljs-comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span><br><span class="hljs-comment">//加载spring核心配置类</span><br><span class="hljs-variable">@ContextConfiguration</span>(classes = &#123;SpringConfiguration.class&#125;)<br>public class SpringJunitTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>④ 使用@Autowired注入需要测试的对象</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringJUnit4ClassRunner.class)<br><span class="hljs-variable">@ContextConfiguration</span>(classes = &#123;SpringConfiguration.class&#125;)<br>public class SpringJunitTest &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    private UserService userService;<br>&#125;<br></code></pre></td></tr></table></figure><p>⑤ 创建测试方法进行测试</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringJUnit4ClassRunner.class)<br><span class="hljs-variable">@ContextConfiguration</span>(classes = &#123;SpringConfiguration.class&#125;)<br>public class SpringJunitTest &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    private UserService userService;<br>    <span class="hljs-variable">@Test</span><br>    public void <span class="hljs-built_in">testUserService</span>()&#123;<br>    <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.save</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【SSM】Spring框架-Spring配置数据源</title>
    <link href="/2023/09/26/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2023/09/26/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-配置数据源-DataSource"><a href="#spring-配置数据源-DataSource" class="headerlink" title="spring 配置数据源 DataSource"></a><strong>spring 配置数据源 DataSource</strong></h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h2><p>• 数据源(连接池)是提高程序性能如出现的</p><p>• 事先实例化数据源，初始化部分连接资源</p><p>• 使用连接资源时从数据源中获取</p><p>• 使用完毕后将连接资源归还给数据源</p><p>常见的数据源(连接池)：<strong>DBCP、C3P0、BoneCP、Druid</strong>等 </p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a><strong>开发步骤</strong></h2><p>① 导入数据源的坐标和数据库驱动坐标</p><p>② 创建数据源对象</p><p>③ 设置数据源的基本连接数据</p><p>④ 使用数据源获取连接资源和归还连接资源 </p><h3 id="数据源的手动创建"><a href="#数据源的手动创建" class="headerlink" title="数据源的手动创建"></a><strong>数据源的手动创建</strong></h3><p>① 导入 c3p0、druid、mysql 数据库驱动坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- C3P0连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mysql驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.39<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 创建C3P0连接池</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">C3P0()</span> throws Exception &#123;<br>    <span class="hljs-comment">//创建数据源</span><br>    ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ComboPooledDataSource()</span>;<br>    <span class="hljs-comment">//设置数据库连接参数</span><br>    dataSource.set<span class="hljs-constructor">DriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span>;<br>    dataSource.set<span class="hljs-constructor">JdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>)</span>;<br>    dataSource.set<span class="hljs-constructor">User(<span class="hljs-string">&quot;root&quot;</span>)</span>;<br>    dataSource.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;root&quot;</span>)</span>;<br>    <span class="hljs-comment">//获得连接对象</span><br>    Connection connection = dataSource.get<span class="hljs-constructor">Connection()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><p>② 创建Druid连接池</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">Druid()</span> throws Exception &#123;<br>    <span class="hljs-comment">//创建数据源</span><br>    DruidDataSource dataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DruidDataSource()</span>;<br>    <span class="hljs-comment">//设置数据库连接参数</span><br>    dataSource.set<span class="hljs-constructor">DriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span>;<br>    dataSource.set<span class="hljs-constructor">Url(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>)</span>;<br>    dataSource.set<span class="hljs-constructor">Username(<span class="hljs-string">&quot;root&quot;</span>)</span>;<br>    dataSource.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;root&quot;</span>)</span>;<br>    <span class="hljs-comment">//获得连接对象</span><br>    Connection connection = dataSource.get<span class="hljs-constructor">Connection()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><p>③ 提取jdbc.properties配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driver</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test<br><span class="hljs-attr">jdbc.username</span>=root<br><span class="hljs-attr">jdbc.password</span>=root<br></code></pre></td></tr></table></figure><p>④ 读取jdbc.properties配置文件创建连接池</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">C3P0ByProperties()</span> throws Exception &#123;<br>    <span class="hljs-comment">//加载类路径下的jdbc.properties</span><br>    ResourceBundle rb = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResourceBundle</span>.</span></span>get<span class="hljs-constructor">Bundle(<span class="hljs-string">&quot;jdbc&quot;</span>)</span>;<br>    ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ComboPooledDataSource()</span>;<br>    dataSource.set<span class="hljs-constructor">DriverClass(<span class="hljs-params">rb</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;jdbc.driver&quot;</span>)</span>);<br>    dataSource.set<span class="hljs-constructor">JdbcUrl(<span class="hljs-params">rb</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;jdbc.url&quot;</span>)</span>);<br>    dataSource.set<span class="hljs-constructor">User(<span class="hljs-params">rb</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;jdbc.username&quot;</span>)</span>);<br>    dataSource.set<span class="hljs-constructor">Password(<span class="hljs-params">rb</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;jdbc.password&quot;</span>)</span>);<br>    Connection connection = dataSource.get<span class="hljs-constructor">Connection()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽取 jdbc.properties 文件( 第二个框框中 getBundler 中的名字  是在 resources 目录下找( 不写 resources ) 文件  同时不写后缀名 )</strong> </p><h3 id="Spring-配置数据源"><a href="#Spring-配置数据源" class="headerlink" title="Spring 配置数据源"></a><strong>Spring 配置数据源</strong></h3><p> 可以将DataSource的创建权交由Spring容器去完成</p><p> DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</p><p> DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;dataSource&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;driverClass&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;jdbcUrl&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;user&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;root&quot;</span>/&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;password&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;root&quot;</span>/&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>测试从容器当中获取数据源</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ApplicationContext applicationContext <span class="hljs-operator">=</span> new  ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>)<span class="hljs-comment">;</span><br>DataSource dataSource <span class="hljs-operator">=</span> (DataSource) <br>applicationContext.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>)<span class="hljs-comment">;</span><br>Connection connection <span class="hljs-operator">=</span> dataSource.getConnection()<span class="hljs-comment">;</span><br>System.out.println(connection)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="抽取-jdbc-配置文件"><a href="#抽取-jdbc-配置文件" class="headerlink" title="抽取 jdbc 配置文件"></a><strong>抽取 jdbc 配置文件</strong></h2><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p><p>首先，需要引入context命名空间和约束路径：</p><p> 命名空间：<strong>xmlns:<strong><strong>context</strong></strong>&#x3D;”<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“</strong></p><p> 约束路径：<strong><a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a></strong></p><p><strong><a href="http://www.springframework.org/schema/context/spring">http://www.springframework.org/schema/context/spring</a></strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driver&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><strong>知识要点</strong></p><p><strong>Spring容器加载properties文件</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;context:property-placeholder <span class="hljs-attribute">location</span>=<span class="hljs-string">&quot;xx.properties&quot;</span>/&gt;<br>&lt;property <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;key&#125;</span>&quot;</span>/&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【SSM】Spring框架-基础知识详解</title>
    <link href="/2023/09/25/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/09/25/%E3%80%90SSM%E3%80%91Spring%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-入门"><a href="#spring-入门" class="headerlink" title="spring 入门"></a><strong>spring 入门</strong></h1><h2 id="spring-简介"><a href="#spring-简介" class="headerlink" title="spring 简介"></a><strong>spring 简介</strong></h2><p>Spring是分层的 Java SE&#x2F;EE应用 full-stack 轻量级开源框架，以 <strong>IoC</strong>（Inverse Of Control：反转控制）和<strong>AOP</strong>（Aspect Oriented Programming：面向切面编程）为内核。</p><p>提供了<strong>展现层 SpringMVC</strong> 和<strong>持久层 Spring JDBCTemplate</strong> 以及<strong>业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p><h2 id="Spring发展历程"><a href="#Spring发展历程" class="headerlink" title="Spring发展历程"></a><strong>Spring发展历程</strong></h2><p>1997 年， IBM提出了EJB 的思想</p><p>1998 年，SUN制定开发标准规范 EJB1.0</p><p>1999 年，EJB1.1 发布</p><p>2001 年，EJB2.0 发布</p><p>2003 年，EJB2.1 发布</p><p>2006 年，EJB3.0 发布</p><p><strong>Rod Johnson （ Spring 之父）</strong></p><p>Expert One-to-One J2EE Design and Development(2002)阐述了 J2EE 使用EJB 开发设计的优点及解决方案</p><p>Expert One-to-One J2EE Development without EJB(2004)阐述了 J2EE 开发不使用 EJB的解决方式（Spring 雏形）</p><p><strong>2017 年 9 月份发布了 Spring 的最新版本 Spring5.0 通用版（GA）</strong></p><h2 id="spring-优势"><a href="#spring-优势" class="headerlink" title="spring 优势"></a><strong>spring 优势</strong></h2><p><strong>1）方便解耦，简化开发</strong></p><p>通过 Spring 提供的 IoC容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度耦合。</p><p>用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><p><strong>2）AOP 编程的支持</strong></p><p>通过 Spring的 AOP 功能，方便进行面向切面编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松实现。</p><p><strong>3）声明式事务的支持</strong></p><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p><p><strong>4）方便程序的测试</strong></p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情</p><p><strong>5）方便集成各种优秀框架</strong></p><p>Spring对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的支持。</p><p><strong>6）降低 JavaEE API 的使用难度</strong></p><p>Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</p><p><strong>7）Java 源码是经典学习范例</strong></p><p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深</p><p>造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p><h2 id="spring-体系结构"><a href="#spring-体系结构" class="headerlink" title="spring 体系结构"></a><strong>spring 体系结构</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps4.jpg" alt="img"> </p><h2 id="spring-快速入门"><a href="#spring-快速入门" class="headerlink" title="spring 快速入门"></a><strong>spring 快速入门</strong></h2><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps5.jpg" alt="img"> </p><h2 id="spring-开发步骤"><a href="#spring-开发步骤" class="headerlink" title="spring 开发步骤"></a><strong>spring 开发步骤</strong></h2><p>① 导入 Spring 开发的基本包坐标</p><p>② 编写 Dao 接口和实现类</p><p>③ 创建 Spring 核心配置文件</p><p>④ 在 Spring 配置文件中配置 UserDaoImpl</p><p>⑤ 使用 Spring 的 API 获得 Bean 实例 </p><h1 id="bean-标签"><a href="#bean-标签" class="headerlink" title="bean 标签"></a><strong>bean 标签</strong></h1><h2 id="bean-基本配置"><a href="#bean-基本配置" class="headerlink" title="bean 基本配置"></a><strong>bean 基本配置</strong></h2><h3 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a><strong>Bean标签基本配置</strong></h3><p>用于配置对象交由<strong>Spring</strong> 来创建。</p><p>默认情况下它调用的是类中的<strong>无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p><p>基本属性：</p><p> <strong>id</strong>：Bean实例在Spring容器中的唯一标识</p><p> <strong>class</strong>：Bean的全限定名称 </p><h3 id="scope-作用范围"><a href="#scope-作用范围" class="headerlink" title="scope 作用范围"></a><strong>scope 作用范围</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps9.jpg" alt="img"> </p><h3 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a><strong>Bean标签范围配置</strong></h3><p><strong>1）当scope的取值为<strong><strong>singleton</strong></strong>时</strong></p><p>Bean的实例化个数：1个</p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>Bean的生命周期：</p><p> 对象创建：当应用加载，创建容器时，对象就被创建了</p><p> 对象运行：只要容器在，对象一直活着</p><p> 对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><p><strong>2）当scope的取值为<strong><strong>prototype</strong></strong>时</strong></p><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p> 对象创建：当使用对象时，创建新的对象实例</p><p> 对象运行：只要对象在使用中，就一直活着</p><p> 对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了 </p><h2 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a><strong>bean 生命周期</strong></h2><p><strong>Bean生命周期配置</strong></p><p> <strong>init-method</strong>：指定类中的初始化方法名称</p><p> <strong>destroy-method</strong>：指定类中销毁方法名称 </p><h2 id="bean-实例化"><a href="#bean-实例化" class="headerlink" title="bean 实例化"></a><strong>bean 实例化</strong></h2><p><strong>Bean实例化三种方式</strong></p><p> 无参<strong>构造</strong>方法实例化</p><p> 工厂<strong>静态</strong>方法实例化</p><p> 工厂<strong>实例</strong>方法实例化 </p><h2 id="bean-依赖注入-DI"><a href="#bean-依赖注入-DI" class="headerlink" title="bean 依赖注入 DI"></a><strong>bean 依赖注入 DI</strong></h2><h3 id="依赖注入分析"><a href="#依赖注入分析" class="headerlink" title="依赖注入分析"></a><strong>依赖注入分析</strong></h3><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps13.jpg" alt="img"> </p><p><img src="file:///D:\A-GitHub\q12we-\source_posts\ksohtml29444\wps14.jpg" alt="img"> </p><h3 id="依赖注入概念"><a href="#依赖注入概念" class="headerlink" title="依赖注入概念"></a><strong>依赖注入概念</strong></h3><p>依赖注入（<strong>Dependency Injection</strong>）：它是 Spring 框架核心 IOC 的具体实现。</p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p><p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p><p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p><p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。 </p><p>在配置文件 applicationContext.xml 中注入 propert 标签</p><h3 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a><strong>注入方式</strong></h3><p>怎么将UserDao怎样注入到UserService内部呢？</p><p> <strong>构造方法</strong></p><p> <strong>set方法</strong> </p><h4 id="1）set方法注入"><a href="#1）set方法注入" class="headerlink" title="1）set方法注入"></a>1）set方法注入</h4><p>在UserServiceImpl中添加setUserDao方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserDao</span> userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserDao</span>(<span class="hljs-params">UserDao userDao</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userDao</span> = userDao;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>) &#123;<br>        userDao.<span class="hljs-title function_">save</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置Spring容器调用set方法进行注入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;userDao&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;<br>&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;userService&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;userDao&quot;</span> ref<span class="hljs-operator">=</span><span class="hljs-string">&quot;userDao&quot;</span>/&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p><p>首先，需要引入P命名空间：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">xmlns:<span class="hljs-attribute">p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span><br>&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> p:userDao<span class="hljs-attribute">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h4 id="2）构造方法注入"><a href="#2）构造方法注入" class="headerlink" title="2）构造方法注入"></a>2）构造方法注入</h4><p>创建有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <br>    <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) applicationContext.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>    userDao.save();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置Spring容器调用有参构造时进行注入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;userDao&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;<br>&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;userService&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;<br>&lt;constructor-arg name<span class="hljs-operator">=</span><span class="hljs-string">&quot;userDao&quot;</span> ref<span class="hljs-operator">=</span><span class="hljs-string">&quot;userDao&quot;</span>&gt;&lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h3 id="注入的数据类型"><a href="#注入的数据类型" class="headerlink" title="注入的数据类型"></a><strong>注入的数据类型</strong></h3><p>除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p><p>注入数据的三种数据类型</p><p> <strong>普通数据类型</strong></p><p> <strong>引用数据类型</strong></p><p> <strong>集合数据类型</strong></p><p>其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入 。</p><p>如果是 private List&lt;&gt; 则用 property 里的 list 标签……</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;**bean** **id****=<span class="hljs-string">&quot;userDao&quot;</span>** **class****=<span class="hljs-string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>**&gt;<br><br>&lt;**property** **name****=<span class="hljs-string">&quot;strList&quot;</span>**&gt;<br><br>&lt;**list**&gt;<br><br>            &lt;**value**&gt;aaa&lt;/**value**&gt;<br><br>            &lt;**value**&gt;bbb&lt;/**value**&gt;<br><br>            &lt;**value**&gt;ccc&lt;/**value**&gt;<br><br>        &lt;/**list**&gt;<br><br>&lt;/**property**&gt;<br><br>&lt;/**bean**&gt;<br></code></pre></td></tr></table></figure><h2 id="分模块-引其他配置文件"><a href="#分模块-引其他配置文件" class="headerlink" title="分模块  引其他配置文件"></a><strong>分模块  引其他配置文件</strong></h2><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;import <span class="hljs-attribute">resource</span>=<span class="hljs-string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><strong>知识要点</strong></p><p><strong>Spring的重点配置</strong></p><p><bean>标签</p><p>​id属性:在容器中Bean实例的唯一标识，不允许重复</p><p>​class属性:要实例化的Bean的全限定名</p><p>​scope属性:Bean的作用范围，常用是Singleton(默认)和prototype</p><p>​<property>标签：属性注入</p><p>​name属性：属性名称</p><p>​value属性：注入的普通属性值</p><p>​ref属性：注入的对象引用值</p><p>​<list>标签</p><p>​<map>标签</p><p>​<properties>标签</p><p>​<constructor-arg>标签</p><p><import>标签:导入其他的Spring的分文件 </p><h1 id="ApplicationContext-应用上下文"><a href="#ApplicationContext-应用上下文" class="headerlink" title="ApplicationContext 应用上下文"></a><strong>ApplicationContext 应用上下文</strong></h1><h2 id="ApplicationContext-相关介绍"><a href="#ApplicationContext-相关介绍" class="headerlink" title="ApplicationContext 相关介绍"></a><strong>ApplicationContext 相关介绍</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps22.jpg" alt="img"> </p><p><strong>ApplicationContext的实现类</strong></p><p><strong>1）ClassPathXmlApplicationContext</strong></p><p>它是从类的根路径下加载配置文件 推荐使用这种</p><p><strong>2）FileSystemXmlApplicationContext</strong></p><p>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p><p><strong>3）AnnotationConfigApplicationContext</strong></p><p>当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>assertBeanFactoryActive();<br><span class="hljs-keyword">return</span> getBeanFactory().getBean(name);<br>&#125;<br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>assertBeanFactoryActive();<br><span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType);<br>&#125;<br></code></pre></td></tr></table></figure><p> 其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p><p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，</p><p>则此方法会报错。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps25.jpg" alt="img"> </p><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a><strong>注解开发</strong></h1><h2 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a><strong>原始注解</strong></h2><p><strong>Spring原始注解</strong></p><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置</p><p>文件可以简化配置，提高开发效率。 </p><p> <strong>Spring原始注解</strong></p><p>Spring原始注解主要是替代<Bean>的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><p><strong>Spring原始注解</strong></p><p><strong>注意：</strong></p><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean</p><p>需要进行扫描以便识别使用注解配置的类、字段和方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--注解的组件扫描--&gt;<br>&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.itheima&quot;</span>&gt;<br>&lt;/context:componentscan&gt;<br></code></pre></td></tr></table></figure><p><strong>使用测试 前 7 个注解</strong></p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps155.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps156.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps157.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps158.jpg" alt="img"> </p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps159.jpg" alt="img"> </p><p><strong>使用测试  后几个</strong></p><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps160.jpg" alt="img"> </p><h2 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a><strong>新注解</strong></h2><p><strong>Spring新注解</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring 在初始化容器时要扫描的包。作用和在 Spring 的 xml 配置文件中的，&lt;context:component-scan base-package&#x3D;”com.itheima”&#x2F;&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到 Spring 容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties 文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><p><img src="file:///C:\Users\lenovo\AppData\Local\Temp\ksohtml29444\wps162.jpg" alt="img"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>my-first-blog</title>
    <link href="/2023/09/23/my-first-blog/"/>
    <url>/2023/09/23/my-first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="标题：我的程序员之路开启——搭建个人博客的第一篇"><a href="#标题：我的程序员之路开启——搭建个人博客的第一篇" class="headerlink" title="标题：我的程序员之路开启——搭建个人博客的第一篇"></a>标题：我的程序员之路开启——搭建个人博客的第一篇</h1><p>大家好！我是q12we，一名在校大学生。今天，我很高兴向大家分享我的个人博客创建的经历和我对于未来的期望。</p><p>曾经，我一直是一个默默无闻的大学生，积累了一些编程经验，但并没有向外界展示。直到最近，我意识到建立一个个人博客的重要性。通过博客，我可以与更多的人交流、分享我的技术心得、记录学习过程，并且与其他程序员建立联系。</p><p>搭建个人博客是一个很有趣的过程。下面，我将分享我的第一篇博客的内容和我在搭建博客过程中遇到的一些挑战。</p><h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><p>我的博客将主要关注以下几个方面：</p><ol><li><p>编程教程和技术分享：我会定期发布有关编程的教程文章，分享我在学习、开发和解决问题过程中的经验和技巧。</p></li><li><p>技术实践：我会分享一些我个人参与的项目、实践和应用，包括前端开发、后端开发等各个方面。</p></li><li><p>解决问题的方法：我将记录一些常见的编程问题和解决方案，帮助其他程序员更快地解决类似的问题。</p></li><li><p>技术趋势和研究：我会关注最新的技术趋势和前沿的研究，分享我的观点和想法。</p><span id="more"></span></li></ol><h2 id="搭建个人博客的挑战"><a href="#搭建个人博客的挑战" class="headerlink" title="搭建个人博客的挑战"></a>搭建个人博客的挑战</h2><p>在搭建个人博客的过程中，我遇到了一些挑战，但也学到了很多知识和技巧。</p><ol><li><p>选择合适的博客平台：我经过一番研究选择了一个适合我的博客平台，并按照教程进行安装和配置。</p></li><li><p>设计和布局：我花了不少时间对博客进行设计和布局，以使其看起来简洁、美观且易于阅读。</p></li><li><p>内容创作：编写第一篇博客是一个新的挑战，我学会了如何用简洁明了的语言表达自己的想法，提供有用的信息给读者。</p></li><li><p>推广和互动：博客不仅仅是写作，还需要积极推广，与读者进行互动，接受反馈，并不断改进和提升。</p></li></ol><h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><p>对于未来，我充满了期待。通过个人博客，我希望能够：</p><ol><li><p>不断学习和进步：通过分享和交流，我相信自己的编程能力会不断提高，学会更多新的知识和技能。</p></li><li><p>建立个人品牌：通过博客，我希望能够建立起自己的个人品牌，让更多人认识和信任我的技术能力。</p></li><li><p>与他人建立联系：我期待能够与更多的程序员、技术爱好者和行业专家建立联系，进行技术交流和合作。</p></li><li><p>提供帮助和价值：我希望能够通过博客为他人提供帮助、分享有价值的内容，为编程社区做出贡献。</p></li></ol><p>在未来的旅程中，我会保持积极的态度和持续的学习精神，分享更多</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/23/hello-world/"/>
    <url>/2023/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
